mdsout_min_outliers[, library_id := colnames(y)]
# Add library characteristics from sample sheet
mdsout_min_outliers <- merge(mdsout_min_outliers, ss_min_outliers, by= "library_id")
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("Ap20-GFP-SFC-4h-R[0-9]", "Ap20-4h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("Ap20-GFP-SFC-16h-R[0-9]", "Ap20-16h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("Ap20-GFP-SFC-8h-R[0-9]", "Ap20-8h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("GFPcon-4hr-R1", "GFPcon-4h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("GFPcon-16hr-R[0-9]", "GFPcon-16h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("GFPcon-8hr-R1_S9", "GFPcon-8h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("GFPcon-8hr-R2", "GFPcon-8h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-9_S416", "RM-9-24h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-8_S415", "RM-8-24h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-7_S414", "RM-7-24h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-6_S413", "RM-6-12h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-5_S412", "RM-5-24h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-4_S411", "RM-4-6h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-3_S410", "RM-3-4h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-2_S409", "RM-2-2h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-1_S408", "RM-1-12h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("F-.*", "RFP-0h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("F[1-3].*", "RFP-0h", mdsout_min_outliers$library_id)]
# MDS plot - dim1 vs dim2:
library(ggrepel)
gg <- ggplot(data= mdsout_min_outliers, aes(x= V1, y= V2, label= library_id, colour= Time, shape= Strain)) +
geom_point() +
geom_text_repel(size = 3) +
ggtitle("MDS plot without outliers following rRNA removal - no batch correction") +
xlab("Leading logFC dim 1") +
ylab("Leading logFC dim 2")
gg + theme(axis.title=element_text(size=10,face="bold"), #legend.title = element_text(size = 10, face="bold"),
plot.title=element_text(size=15, face="bold"),axis.text = element_text(face="bold"))
setwd('~/MRes_Malaria_2021/git_repos//mres-malaria-gene-expression/Plots/')
ggsave('MDSplot_nooutliers_nobatchcorrection.png', width = 5, height = 5)
gg <- ggplot(data= mdsout_min_outliers, aes(x= V1, y= V2, label= library_id, colour= Time, shape= Strain)) +
geom_point() +
geom_text_repel(size = 3) +
ggtitle("MDS plot without outliers following rRNA removal - no batch correction") +
xlab("Leading logFC dim 1") +
ylab("Leading logFC dim 2")
gg + theme(axis.title=element_text(size=10,face="bold"), #legend.title = element_text(size = 10, face="bold"),
plot.title=element_text(size=15, face="bold"),axis.text = element_text(face="bold"))
setwd('~/MRes_Malaria_2021/git_repos//mres-malaria-gene-expression/Plots/')
ggsave('MDSplot_nooutliers_nobatchcorrection.png', width = 7, height = 5)
gg <- ggplot(data= mdsout_min_outliers, aes(x= V1, y= V2, label= library_id, colour= Time, shape= Strain)) +
geom_point() +
geom_text_repel(size = 3) +
ggtitle("MDS plot without outliers following rRNA removal - no batch correction") +
xlab("Leading logFC dim 1") +
ylab("Leading logFC dim 2")
gg + theme(axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold")) #plot.title=element_text(size=15, face="bold")
setwd('~/MRes_Malaria_2021/git_repos//mres-malaria-gene-expression/Plots/')
ggsave('MDSplot_nooutliers_nobatchcorrection.png', width = 7, height = 5)
rm(list=ls())
library(data.table)
library(edgeR)
#input and output files
ss_min_outliers <- fread('sample_sheet_minusoutliers.tsv')
#read the sample sheet
setwd('~/MRes_Malaria_2021/git_repos/mres-malaria-gene-expression/')
ss_min_outliers <- fread('sample_sheet_minusoutliers.tsv')
ss_min_outliers[, Time := sprintf('%.2d', Time)]
ss_min_outliers[, group := paste(Time)]
ss_min_outliers$Time <- as.factor(ss_min_outliers$Time)
# Another sanity check that Time is a factor variable - maybe redundant
stopifnot(is.factor(ss_min_outliers$Time))
#read the counts table
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/featureCounts/')
counts <- fread(cmd= 'grep -v "^#" counts.tsv')
counts
class(counts)
setnames(counts, names(counts), sub('.bam', '', basename(names(counts))))
counts_min_outliers <- counts[, c('Geneid', ss_min_outliers$library_id), with= FALSE]
#Removing the rRNA contamination
#load required packages
library(dplyr)
library(tidyr)
#read the annotation file
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/ref/')
GFF <- fread(cmd = 'grep -v "^#" PlasmoDB-49_PbergheiANKA.gff')
rRNA_GFF <- GFF %>%
filter(V3 == "rRNA")
rRNA_ID <- subset(rRNA_GFF, select= V9)
RNA_ID_sep <- separate(data = rRNA_ID, col = V9, into = c("Geneid_Feature", "Parent", "Description", "Geneid"), sep = "([;])")
RNA_Gene_ID <- subset(RNA_ID_sep, select= Geneid)
class(RNA_Gene_ID)
RNA_Gene_ID <- gsub("gene_id=", "", RNA_Gene_ID$Geneid)
counts_min_outliers <- counts_min_outliers[!counts_min_outliers$Geneid %in% RNA_Gene_ID]
#create a matrix of the counts
mat <- as.matrix(counts_min_outliers, rownames= 'Geneid')
#for batch correction, rename mat to raw_counts
raw_counts <- mat
# Sanity check that sample sheet and count matrix are in the same order
#issue with this command...
stopifnot(identical(ss_min_outliers$library_id, colnames(raw_counts)))
#load sva for batch correction
library(sva)
adj_counts <- ComBat_seq(raw_counts, batch= ss_min_outliers$Batch, group= ss_min_outliers$Time)
design <- model.matrix(~0 + ss_min_outliers$group)
colnames(design) <- sub('ss_min_outliers$group', '', colnames(design), fixed= TRUE)
y <- DGEList(counts= adj_counts, #mat
group= ss_min_outliers$group)
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
y <- estimateDisp(y, design)
y$samples
mds_min_outliers <- plotMDS(y, plot=FALSE)
mdsout_min_outliers <- as.data.table(mds_min_outliers$cmdscale.out)
mdsout_min_outliers[, library_id := colnames(y)]
# Add library characteristics from sample sheet
mdsout_min_outliers <- merge(mdsout_min_outliers, ss_min_outliers, by= "library_id")
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("Ap20-GFP-SFC-4h-R[0-9]", "Ap20-4h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("Ap20-GFP-SFC-16h-R[0-9]", "Ap20-16h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("Ap20-GFP-SFC-8h-R[0-9]", "Ap20-8h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("GFPcon-4hr-R1", "GFPcon-4h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("GFPcon-16hr-R[0-9]", "GFPcon-16h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("GFPcon-8hr-R1_S9", "GFPcon-8h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("GFPcon-8hr-R2", "GFPcon-8h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-9_S416", "RM-9-24h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-8_S415", "RM-8-24h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-7_S414", "RM-7-24h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-6_S413", "RM-6-12h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-5_S412", "RM-5-24h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-4_S411", "RM-4-6h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-3_S410", "RM-3-4h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-2_S409", "RM-2-2h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-1_S408", "RM-1-12h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("F-.*", "RFP-0h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("F[1-3].*", "RFP-0h", mdsout_min_outliers$library_id)]
# MDS plot - dim1 vs dim2:
library(ggrepel)
gg <- ggplot(data= mdsout_min_outliers, aes(x= V1, y= V2, label= library_id, colour= Time, shape= Strain)) +
geom_point() +
geom_text_repel(size = 3) +
ggtitle("MDS plot without outliers following rRNA removal - batch correction") +
xlab("Leading logFC dim 1") +
ylab("Leading logFC dim 2")
gg + theme(axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold")) #plot.title=element_text(size=15, face="bold")
setwd('~/MRes_Malaria_2021/git_repos//mres-malaria-gene-expression/Plots/')
ggsave('MDSplot_nooutliers_batchcorrection.png', width = 5, height = 5)
rm(list=ls())
#Packages required
library(data.table)
library(edgeR)
#read the sample sheet
setwd('~/MRes_Malaria_2021/git_repos/mres-malaria-gene-expression/')
ss <- fread('sample_sheet.tsv')
ss[, Time := sprintf('%.2d', Time)]
ss[, group := paste(Time)]
ss$Time <- as.factor(ss$Time)
# Another sanity check that Time is a factor variable - maybe redundant
stopifnot(is.factor(ss$Time))
#read the counts table
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/featureCounts/')
counts <- fread(cmd= 'grep -v "^#" counts.tsv')
setnames(counts, names(counts), sub('.bam', '', basename(names(counts))))
counts <- counts[, c('Geneid', ss$library_id), with= FALSE]
#create a matrix of the counts
mat <- as.matrix(counts, rownames= 'Geneid')
design <- model.matrix(~0 + ss$group)
colnames(design) <- sub('ss$group', '', colnames(design), fixed= TRUE)
y <- DGEList(counts= mat,
group= ss$group)
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
y <- estimateDisp(y, design)
mds_min_outliers <- plotMDS(y, plot=FALSE)
mdsout_min_outliers <- as.data.table(mds_min_outliers$cmdscale.out)
mdsout_min_outliers[, library_id := colnames(y)]
# Add library characteristics from sample sheet
mdsout_min_outliers <- merge(mdsout_min_outliers, ss, by= "library_id")
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("Ap20-GFP-SFC-4h-R[0-9]", "Ap20-4h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("Ap20-GFP-SFC-16h-R[0-9]", "Ap20-16h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("Ap20-GFP-SFC-8h-R[0-9]", "Ap20-8h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("GFPcon-4hr-R1", "GFPcon-4h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("GFPcon-16hr-R[0-9]", "GFPcon-16h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("GFPcon-8hr-R1_S9", "GFPcon-8h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("GFPcon-8hr-R2", "GFPcon-8h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-9_S416", "RM-9-24h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-8_S415", "RM-8-24h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-7_S414", "RM-7-24h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-6_S413", "RM-6-12h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-5_S412", "RM-5-24h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-4_S411", "RM-4-6h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-3_S410", "RM-3-4h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-2_S409", "RM-2-2h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-1_S408", "RM-1-12h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("F-.*", "RFP-0h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("F[1-3].*", "RFP-0h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("GFPcon-4hr-R2", "GFPcon-4h", mdsout_min_outliers$library_id)]
mdsout_min_outliers$library_id <- mdsout_min_outliers [, gsub("RM-10_S417", "RM-10-24h", mdsout_min_outliers$library_id)]
# MDS plot - dim1 vs dim2:
library(ggrepel)
gg <- ggplot(data= mdsout_min_outliers, aes(x= V1, y= V2, label= library_id, colour= Time, shape= Strain)) +
geom_point() +
geom_text_repel(size = 3) +
ggtitle("MDS plot with outliers following rRNA removal - no batch correction") +
xlab("Leading logFC dim 1") +
ylab("Leading logFC dim 2")
gg + theme(axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold")) #plot.title=element_text(size=15, face="bold")
setwd('~/MRes_Malaria_2021/git_repos//mres-malaria-gene-expression/Plots/')
ggsave('MDSplot_outliers_nobatchcorrection.png', width = 5, height = 5)
gg <- ggplot(data= mdsout_min_outliers, aes(x= V1, y= V2, label= library_id, colour= Time, shape= Strain)) +
geom_point() +
geom_text_repel(size = 3) +
ggtitle("MDS plot with outliers following rRNA removal - no batch correction") +
xlab("Leading logFC dim 1") +
ylab("Leading logFC dim 2")
gg + theme(axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold")) #plot.title=element_text(size=15, face="bold")
setwd('~/MRes_Malaria_2021/git_repos//mres-malaria-gene-expression/Plots/')
ggsave('MDSplot_outliers_nobatchcorrection.png', width = 7, height = 5)
gg <- ggplot(data= mdsout_min_outliers, aes(x= V1, y= V2, label= library_id, colour= Time, shape= Strain)) +
geom_point() +
geom_text_repel(size = 3) +
ggtitle("MDS plot with outliers following rRNA removal - no batch correction") +
xlab("Leading logFC dim 1") +
ylab("Leading logFC dim 2")
gg + theme(axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold")) #plot.title=element_text(size=15, face="bold")
setwd('~/MRes_Malaria_2021/git_repos//mres-malaria-gene-expression/Plots/')
ggsave('MDSplot_outliers_nobatchcorrection.png', width = 5, height = 7)
gg <- ggplot(data= mdsout_min_outliers, aes(x= V1, y= V2, label= library_id, colour= Time, shape= Strain)) +
geom_point() +
geom_text_repel(size = 3) +
ggtitle("MDS plot with outliers following rRNA removal - no batch correction") +
xlab("Leading logFC dim 1") +
ylab("Leading logFC dim 2")
gg + theme(axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold")) #plot.title=element_text(size=15, face="bold")
setwd('~/MRes_Malaria_2021/git_repos//mres-malaria-gene-expression/Plots/')
ggsave('MDSplot_outliers_nobatchcorrection.png', width = 6, height = 7)
gg <- ggplot(data= mdsout_min_outliers, aes(x= V1, y= V2, label= library_id, colour= Time, shape= Strain)) +
geom_point() +
geom_text_repel(size = 3) +
ggtitle("MDS plot with outliers following rRNA removal - no batch correction") +
xlab("Leading logFC dim 1") +
ylab("Leading logFC dim 2")
gg + theme(axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold")) #plot.title=element_text(size=15, face="bold")
setwd('~/MRes_Malaria_2021/git_repos//mres-malaria-gene-expression/Plots/')
ggsave('MDSplot_outliers_nobatchcorrection.png', width = 7, height = 7)
gg <- ggplot(data= mdsout_min_outliers, aes(x= V1, y= V2, label= library_id, colour= Time, shape= Strain)) +
geom_point() +
geom_text_repel(size = 3) +
ggtitle("MDS plot with outliers following rRNA removal - no batch correction") +
xlab("Leading logFC dim 1") +
ylab("Leading logFC dim 2")
gg + theme(axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold")) #plot.title=element_text(size=15, face="bold")
setwd('~/MRes_Malaria_2021/git_repos//mres-malaria-gene-expression/Plots/')
ggsave('MDSplot_outliers_nobatchcorrection.png', width = 6, height = 8)
gg <- ggplot(data= mdsout_min_outliers, aes(x= V1, y= V2, label= library_id, colour= Time, shape= Strain)) +
geom_point() +
geom_text_repel(size = 3) +
ggtitle("MDS plot with outliers following rRNA removal - no batch correction") +
xlab("Leading logFC dim 1") +
ylab("Leading logFC dim 2")
gg + theme(axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold")) #plot.title=element_text(size=15, face="bold")
setwd('~/MRes_Malaria_2021/git_repos//mres-malaria-gene-expression/Plots/')
ggsave('MDSplot_outliers_nobatchcorrection.png', width = 6, height = 10)
gg <- ggplot(data= mdsout_min_outliers, aes(x= V1, y= V2, label= library_id, colour= Time, shape= Strain)) +
geom_point() +
geom_text_repel(size = 3) +
ggtitle("MDS plot with outliers following rRNA removal - no batch correction") +
xlab("Leading logFC dim 1") +
ylab("Leading logFC dim 2")
gg + theme(axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold")) #plot.title=element_text(size=15, face="bold")
setwd('~/MRes_Malaria_2021/git_repos//mres-malaria-gene-expression/Plots/')
ggsave('MDSplot_outliers_nobatchcorrection.png', width = 6, height = 9)
gg <- ggplot(data= mdsout_min_outliers, aes(x= V1, y= V2, label= library_id, colour= Time, shape= Strain)) +
geom_point() +
geom_text_repel(size = 3) +
ggtitle("MDS plot with outliers following rRNA removal - no batch correction") +
xlab("Leading logFC dim 1") +
ylab("Leading logFC dim 2")
gg + theme(axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold")) #plot.title=element_text(size=15, face="bold")
setwd('~/MRes_Malaria_2021/git_repos//mres-malaria-gene-expression/Plots/')
ggsave('MDSplot_outliers_nobatchcorrection.png', width = 6, height = 8)
rm(list=ls())
library(data.table)
library(edgeR)
#input and output files
ss_min_outliers <- fread('sample_sheet_minusoutliers.tsv')
counts <- fread(cmd= 'grep -v "^#" counts.tsv')
GFF <- fread(cmd = 'grep -v "^#" PlasmoDB-49_PbergheiANKA.gff')
dge_table= 'edger/differential_gene_expression.tsv'
rpkm_table= 'edger/logrpkm.tsv'
#read the sample sheet
setwd('~/MRes_Malaria_2021/git_repos/mres-malaria-gene-expression/')
ss_min_outliers <- fread('sample_sheet_minusoutliers.tsv')
ss_min_outliers[, Time := sprintf('%.2d', Time)]
ss_min_outliers[, group := paste(Time)]
ss_min_outliers$Time <- as.factor(ss_min_outliers$Time)
# Another sanity check that Time is a factor variable - maybe redundant
stopifnot(is.factor(ss_min_outliers$Time))
#read the counts table
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/featureCounts/')
counts <- fread(cmd= 'grep -v "^#" counts.tsv')
counts
class(counts)
setnames(counts, names(counts), sub('.bam', '', basename(names(counts))))
counts_min_outliers <- counts[, c('Geneid', ss_min_outliers$library_id), with= FALSE]
#Removing the rRNA contamination
#load required packages
library(dplyr)
library(tidyr)
#read the annotation file
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/ref/')
GFF <- fread(cmd = 'grep -v "^#" PlasmoDB-49_PbergheiANKA.gff')
rRNA_GFF <- GFF %>%
filter(V3 == "rRNA")
rRNA_ID <- subset(rRNA_GFF, select= V9)
RNA_ID_sep <- separate(data = rRNA_ID, col = V9, into = c("Geneid_Feature", "Parent", "Description", "Geneid"), sep = "([;])")
RNA_Gene_ID <- subset(RNA_ID_sep, select= Geneid)
class(RNA_Gene_ID)
RNA_Gene_ID <- gsub("gene_id=", "", RNA_Gene_ID$Geneid)
counts_min_outliers <- counts_min_outliers[!counts_min_outliers$Geneid %in% RNA_Gene_ID]
#create a matrix of the counts
mat <- as.matrix(counts_min_outliers, rownames= 'Geneid')
#for batch correction, rename mat to raw_counts
raw_counts <- mat
# Sanity check that sample sheet and count matrix are in the same order
#issue with this command...
stopifnot(identical(ss_min_outliers$library_id, colnames(raw_counts)))
#load sva for batch correction
library(sva)
adj_counts <- ComBat_seq(raw_counts, batch= ss_min_outliers$Batch, group= ss_min_outliers$Time)
#raw_counts is the matrix of counts with rRNA and failed libraries removed;
#ss_min_outliers is the sample sheet with column batch as prepared above and Time as factor as before.
#adj_counts is the adjusted matrix of counts that can be used for everything else
#from now on.
design <- model.matrix(~0 + ss_min_outliers$group)
colnames(design) <- sub('ss_min_outliers$group', '', colnames(design), fixed= TRUE)
y <- DGEList(counts= adj_counts, #mat
group= ss_min_outliers$group)
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
y <- estimateDisp(y, design)
design_glm <- model.matrix(~0+group, data=y$samples)
design_glm
#Here, the0+in the model formula is an instruction
#not to include an intercept column and instead to include a column for each group
# These must be the same as those for ATAC
contrasts <- makeContrasts("h24vs16"= group24 - group16,
#"h24vs12"= group24 - group12,
"h16vs12"= group16 - group12,
#"h16vs8"= group16 - group08,
#"h16vs4"= group16 - group04,
"h12vs8"= group12 - group08,
"h8vs4"= group08 - group04,
"h4vs0"= group04 - group00,
levels= make.names(colnames(design_glm)))
stopifnot(all(abs(colSums(contrasts)) < 1e-6))
#glmFit = Fit a negative binomial generalized log-linear model to the read counts
#for each gene.
fit <- glmFit(y, design_glm, prior.count= 1)
#Create the dge table
dge <- list()
for(cntr in colnames(contrasts)){{
print(cntr)
lfc <- glmTreat(fit, contrast= contrasts[, cntr], lfc= log2(1.5))
#numeric scalar specifying the absolute value
#of the log2-fold change threshold
#above which differential expression is to be considered.
detable <- topTags(lfc, n= nrow(y))$table
#n = max number of genes/tags to return
detable$gene_id <- row.names(detable)
detable <- data.table(detable)
detable[, contrast := cntr]
dge[[length(dge)+1]] <- detable
}}
dge <- rbindlist(dge)
class(dge)
dge[, unshrunk.logFC := NULL]
gene <- GFF[V3 == "gene", list(attributes = V9)]
gene_id_only <- gene[, gene_id := sub(".*;gene_id=", "", attributes)]
gene_id_descr <- gene_id_only[, description := sub(".*;description=", "", attributes)]
gene_id_descr <- gene_id_descr[, description := sub(";.*", "", description)]
gene_id_descr_table <- data.table(gene_id_descr$gene_id, gene_id_descr$description)
colnames(gene_id_descr_table) <- c("Geneid", "description")
class(gene_id_descr_table)
gene_id_descr_table[, description := sapply(description, URLdecode)]
dge_descr <- merge(dge, gene_id_descr_table, by.x= 'gene_id', by.y= 'Geneid', all.x= TRUE, sort= FALSE)
dge_descr
#order the contrasts appropriately - only adjacent timepoints
xord <- c('h4vs0', 'h8vs4', 'h12vs8', 'h16vs12', 'h24vs16')
dge_descr[, contrast_order := factor(contrast, xord)]
nsig <- dge_descr[, list(n_up= sum(FDR < 0.01 & logFC > 0), n_down= sum(FDR < 0.01 & logFC < 0)), contrast_order]
nsig[, n_up:= sprintf('Up = %s', n_up)]
nsig[, n_down:= sprintf('Down = %s', n_down)]
l
library(ggplot2)
gg <- ggplot(data= dge_descr, aes(x= logCPM, y= logFC)) +
geom_point(alpha= 0.5, pch= '.') +
geom_point(data= dge_descr[FDR < 0.01], alpha= 0.5, colour= 'red', pch= '.') +
#to avoid overplotting, geom_smooth() and alpha (make points transparent)
geom_smooth(se= FALSE, col= 'grey60', size= 0.1) +
geom_hline(yintercept= 0, colour= 'blue') +
geom_text(data= nsig, x= Inf, y= Inf, aes(label= n_up), vjust= 1.3, hjust= 1.1, size= 3) +
geom_text(data= nsig, x= Inf, y= -Inf, aes(label= n_down), vjust= -1.2, hjust= 1.1, size= 3) +
facet_wrap(~contrast_order, ncol= 2) +
#free_y - individual axes
ggtitle("MA plot with batch correction") +
theme(strip.text= element_text(colour= 'black'))
gg <- ggplot(data= dge_descr, aes(x= logCPM, y= logFC)) +
geom_point(alpha= 0.5, pch= '.') +
geom_point(data= dge_descr[FDR < 0.01], alpha= 0.5, colour= 'red', pch= '.') +
#to avoid overplotting, geom_smooth() and alpha (make points transparent)
geom_smooth(se= FALSE, col= 'grey60', size= 0.1) +
geom_hline(yintercept= 0, colour= 'blue') +
geom_text(data= nsig, x= Inf, y= Inf, aes(label= n_up), vjust= 1.3, hjust= 1.1, size= 3) +
geom_text(data= nsig, x= Inf, y= -Inf, aes(label= n_down), vjust= -1.2, hjust= 1.1, size= 3) +
facet_wrap(~contrast_order, ncol= 2) +
#free_y - individual axes
ggtitle("MA plot with batch correction")
gg + theme(strip.text= element_text(colour= 'black'))
gg + theme(strip.text= element_text(colour= 'black'), axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold"))
ggsave('MAplot_batchcorrection_adj_contrasts.png', width= 16, height= 20, units= 'cm')
gg <- ggplot(data= dge_descr, aes(x= logCPM, y= logFC)) +
geom_point(alpha= 0.5, pch= '.') +
geom_point(data= dge_descr[FDR < 0.01], alpha= 0.5, colour= 'red', pch= '.') +
#to avoid overplotting, geom_smooth() and alpha (make points transparent)
geom_smooth(se= FALSE, col= 'grey60', size= 0.1) +
geom_hline(yintercept= 0, colour= 'blue') +
geom_text(data= nsig, x= Inf, y= Inf, aes(label= n_up), vjust= 1.3, hjust= 1.1, size= 3) +
geom_text(data= nsig, x= Inf, y= -Inf, aes(label= n_down), vjust= -1.2, hjust= 1.1, size= 3) +
facet_wrap(~contrast_order, ncol= 2) +
#free_y - individual axes
ggtitle("MA plot with batch correction")
gg + theme(strip.text= element_text(colour= 'black'), axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold"))
gg
setwd('~/MRes_Malaria_2021/git_repos/mres-malaria-gene-expression/Plots/')
ggsave('MAplot_batchcorrection_adj_contrasts.png', width= 16, height= 20, units= 'cm')
gg <- ggplot(data= dge_descr, aes(x= logCPM, y= logFC)) +
geom_point(alpha= 0.5, pch= '.') +
geom_point(data= dge_descr[FDR < 0.01], alpha= 0.5, colour= 'red', pch= '.') +
#to avoid overplotting, geom_smooth() and alpha (make points transparent)
geom_smooth(se= FALSE, col= 'grey60', size= 0.1) +
geom_hline(yintercept= 0, colour= 'blue') +
geom_text(data= nsig, x= Inf, y= Inf, aes(label= n_up), vjust= 1.3, hjust= 1.1, size= 3) +
geom_text(data= nsig, x= Inf, y= -Inf, aes(label= n_down), vjust= -1.2, hjust= 1.1, size= 3) +
facet_wrap(~contrast_order, ncol= 2) +
#free_y - individual axes
ggtitle("MA plot with batch correction")
gg +
theme(strip.text= element_text(colour= 'black'), axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold"))
gg
setwd('~/MRes_Malaria_2021/git_repos/mres-malaria-gene-expression/Plots/')
ggsave('MAplot_batchcorrection_adj_contrasts.png', width= 16, height= 20, units= 'cm')
gg <- ggplot(data= dge_descr, aes(x= logCPM, y= logFC)) +
geom_point(alpha= 0.5, pch= '.') +
geom_point(data= dge_descr[FDR < 0.01], alpha= 0.5, colour= 'red', pch= '.') +
#to avoid overplotting, geom_smooth() and alpha (make points transparent)
geom_smooth(se= FALSE, col= 'grey60', size= 0.1) +
geom_hline(yintercept= 0, colour= 'blue') +
geom_text(data= nsig, x= Inf, y= Inf, aes(label= n_up), vjust= 1.3, hjust= 1.1, size= 3) +
geom_text(data= nsig, x= Inf, y= -Inf, aes(label= n_down), vjust= -1.2, hjust= 1.1, size= 3) +
facet_wrap(~contrast_order, ncol= 2) +
#free_y - individual axes
ggtitle("MA plot with batch correction")
gg +
theme(strip.text= element_text(colour= 'black'), axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold"))
gg
setwd('~/MRes_Malaria_2021/git_repos/mres-malaria-gene-expression/Plots/')
ggsave('MAplot_batchcorrection_adj_contrasts.png', width= 10, height= 10, units= 'cm')
gg <- ggplot(data= dge_descr, aes(x= logCPM, y= logFC)) +
geom_point(alpha= 0.5, pch= '.') +
geom_point(data= dge_descr[FDR < 0.01], alpha= 0.5, colour= 'red', pch= '.') +
#to avoid overplotting, geom_smooth() and alpha (make points transparent)
geom_smooth(se= FALSE, col= 'grey60', size= 0.1) +
geom_hline(yintercept= 0, colour= 'blue') +
geom_text(data= nsig, x= Inf, y= Inf, aes(label= n_up), vjust= 1.3, hjust= 1.1, size= 3) +
geom_text(data= nsig, x= Inf, y= -Inf, aes(label= n_down), vjust= -1.2, hjust= 1.1, size= 3) +
facet_wrap(~contrast_order, ncol= 2) +
#free_y - individual axes
ggtitle("MA plot with batch correction")
gg +
theme(strip.text= element_text(colour= 'black'), axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold"))
gg
setwd('~/MRes_Malaria_2021/git_repos/mres-malaria-gene-expression/Plots/')
ggsave('MAplot_batchcorrection_adj_contrasts.png', width= 15, height= 15, units= 'cm')
gg <- ggplot(data= dge_descr, aes(x= logCPM, y= logFC)) +
geom_point(alpha= 0.5, pch= '.') +
geom_point(data= dge_descr[FDR < 0.01], alpha= 0.5, colour= 'red', pch= '.') +
#to avoid overplotting, geom_smooth() and alpha (make points transparent)
geom_smooth(se= FALSE, col= 'grey60', size= 0.1) +
geom_hline(yintercept= 0, colour= 'blue') +
geom_text(data= nsig, x= Inf, y= Inf, aes(label= n_up), vjust= 1.3, hjust= 1.1, size= 3) +
geom_text(data= nsig, x= Inf, y= -Inf, aes(label= n_down), vjust= -1.2, hjust= 1.1, size= 3) +
facet_wrap(~contrast_order, ncol= 2) +
#free_y - individual axes
ggtitle("MA plot with batch correction")
gg +
theme(strip.text= element_text(colour= 'black'), axis.title=element_text(size=10,face="bold"), legend.title = element_text(size = 10, face="bold"),
axis.text = element_text(face="bold"))
gg
setwd('~/MRes_Malaria_2021/git_repos/mres-malaria-gene-expression/Plots/')
ggsave('MAplot_batchcorrection_adj_contrasts.png', width= 12, height= 12, units= 'cm')
