getwd()
counts <- fread(cmd= 'grep -v "^#" counts.tsv')
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/featureCounts/')
counts <- fread(cmd= 'grep -v "^#" counts.tsv')
### Remove rRNA genes from counts
setwd('~/MRes_Malaria_2021/git_repos/mres-malaria-gene-expression/')
getwd()
ss <- fread('sample_sheet.tsv')
setnames(counts, names(counts), sub('.bam', '', basename(names(counts))))
counts <- counts[, c('Geneid', ss$library_id), with= FALSE]
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/ref/')
GFF <- fread(cmd = 'grep -v "^#" PlasmoDB-49_PbergheiANKA.gff')
GFF
library(dplyr)
library(tidyr)
gene <- GFF[V3 == "gene", list(attributes = V9)]
gene_id_only <- gene[, gene_id := sub(".*;gene_id=", "", attributes)]
gene_id_descr <- gene_id_only[, description := sub(".*;description=", "", attributes)]
gene_id_descr <- gene_id_descr[, description := sub(";.*", "", description)]
gene_id_descr_table <- data.table(gene_id_descr$gene_id, gene_id_descr$description)
colnames(gene_id_descr_table) <- c("Geneid", "description")
View(gene_id_descr_table)
#saving table
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
gz <- gzfile('geneid_description_table', 'w')
write.table(gene_id_descr_table, gz, sep= '\t', row.names= FALSE, quote= FALSE)
close(gz)
# Differential expression
# =======================
# Generate the DGEList y - removing the rRNA gene counts and the outliers
rm(list=ls())
library(data.table)
library(edgeR)
setwd('~/MRes_Malaria_2021/git_repos/mres-malaria-gene-expression/')
getwd()
ss_min_outliers <- fread('sample_sheet_minusoutliers.tsv')
# reassign Time as a character vector so that it sorts appropriately
sprintf('%.2d', 0:11)
ss_min_outliers[, Time := sprintf('%.2d', Time)]
View(ss_min_outliers)
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/featureCounts/')
counts <- fread(cmd= 'grep -v "^#" counts.tsv') #this command isnt working?
counts
class(counts)
setnames(counts, names(counts), sub('.bam', '', basename(names(counts))))
counts_min_outliers <- counts[, c('Geneid', ss_min_outliers$library_id), with= FALSE]
library(dplyr)
library(tidyr)
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/ref/')
GFF <- fread(cmd = 'grep -v "^#" PlasmoDB-49_PbergheiANKA.gff')
GFF
rRNA_GFF <- GFF %>%
filter(V3 == "rRNA")
rRNA_ID <- subset(rRNA_GFF, select= V9)
RNA_ID_sep <- separate(data = rRNA_ID, col = V9, into = c("Geneid_Feature", "Parent", "Description", "Geneid"), sep = "([;])")
RNA_Gene_ID <- subset(RNA_ID_sep, select= Geneid)
class(RNA_Gene_ID)
RNA_Gene_ID <- gsub("gene_id=", "", RNA_Gene_ID$Geneid)
class(RNA_Gene_ID)
counts_min_outliers <- counts_min_outliers[!counts_min_outliers$Geneid %in% RNA_Gene_ID]
mat <- as.matrix(counts_min_outliers, rownames= 'Geneid')
ss_min_outliers[, group := paste(Time)]
ss_min_outliers$Time <- as.factor(ss_min_outliers$Time)
class(ss_min_outliers$Time)
design <- model.matrix(~0 + ss_min_outliers$group)
colnames(design) <- sub('ss_min_outliers$group', '', colnames(design), fixed= TRUE)
y <- DGEList(counts= mat, group= ss_min_outliers$group)
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
y <- estimateDisp(y, design)
#Note that it is not necessary to have multiple replicates for all the conditions,
#although it is usually desirable to do so. By default, the conditions
#will be listed in alphabetical order,regardless of the order that the data were read
levels(y$samples$group)
#The glm approach to multiple groups is similar to the classic approach,
#but permits more general comparisons to be made
design_glm <- model.matrix(~0+group, data=y$samples)
#colnames(design_glm) <- levels(y$samples$group)
design_glm
# These must be the same as those for ATAC
contrasts <- makeContrasts("h24vs16"= group24 - group16,
"h24vs12"= group24 - group12,
"h16vs12"= group16 - group12,
"h16vs8"= group16 - group08,
"h16vs4"= group16 - group04,
"h12vs8"= group12 - group08,
"h8vs4"= group08 - group04,
"h4vs0"= group04 - group00,
levels= make.names(colnames(design_glm)))
class(design_glm)
stopifnot(all(abs(colSums(contrasts)) < 1e-6))
fit <- glmFit(y, design_glm, prior.count= 1)
dge <- list()
#Functions to construct, coerce and check for both kinds of R lists.
for(cntr in colnames(contrasts)){{
print(cntr)
lfc <- glmTreat(fit, contrast= contrasts[, cntr], lfc= log2(1.5))
#numeric scalar specifying the absolute value
#of the log2-fold change threshold
#above which differential expression is to be considered.
detable <- topTags(lfc, n= nrow(y))$table
#n = max number of genes/tags to return
detable$gene_id <- row.names(detable)
detable <- data.table(detable)
detable[, contrast := cntr]
dge[[length(dge)+1]] <- detable
}}
dge <- rbindlist(dge)
class(dge)
dge[, unshrunk.logFC := NULL]
summary(decideTests(lfc))
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
gz <- gzfile('dge_table_time0_additionalcontrasts_7April', 'w')
write.table(dge, gz, sep= '\t', row.names= FALSE, quote= FALSE)
close(gz)
View(dge)
dgetest <- dge
is.data.table(dgetest) == TRUE
dgetest [, label := paste(gene_id, contrast)]
print(dgetest$label)
xord <- dgetest[order(-contrast)]$label
print(xord) # The order we want
View(detable)
View(dge)
View(dgetest)
View(dge)
View(dgetest)
View(dge)
View(dgetest)
dgetest [,gene_id = sprintf('gene_%02d')]
dgetest [,contrast = sprintf('gene_%02d')]
dgetest [,contrast = sprintf('gene_%02d')]
dgetest <- dgetest [, dge&contrast = sprintf('contrast_%02d')]
xord <- c('h24vs16', 'h24vs12', 'h16vs12', 'h16vs8', 'h16vs4', 'h12vs8', 'h8vs4', '4vs0')
dge[, contrast := factor(contrast, xord)]
View(dge)
View(contrasts)
dge[, contrast_order := factor(contrast, xord)]
View(dge)
xord <- c('h24vs16', 'h24vs12', 'h16vs12', 'h16vs8', 'h16vs4', 'h12vs8', 'h8vs4', 'h4vs0')
dge[, contrast_order := factor(contrast, xord)]
View(dge)
rm(list=ls())
library(data.table)
library(edgeR)
setwd('~/MRes_Malaria_2021/git_repos/mres-malaria-gene-expression/')
getwd()
ss_min_outliers <- fread('sample_sheet_minusoutliers.tsv')
# reassign Time as a character vector so that it sorts appropriately
sprintf('%.2d', 0:11)
ss_min_outliers[, Time := sprintf('%.2d', Time)]
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/featureCounts/')
counts <- fread(cmd= 'grep -v "^#" counts.tsv') #this command isnt working?
counts
class(counts)
setnames(counts, names(counts), sub('.bam', '', basename(names(counts))))
counts_min_outliers <- counts[, c('Geneid', ss_min_outliers$library_id), with= FALSE]
library(dplyr)
library(tidyr)
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/ref/')
GFF <- fread(cmd = 'grep -v "^#" PlasmoDB-49_PbergheiANKA.gff')
GFF
rRNA_GFF <- GFF %>%
filter(V3 == "rRNA")
rRNA_ID <- subset(rRNA_GFF, select= V9)
RNA_ID_sep <- separate(data = rRNA_ID, col = V9, into = c("Geneid_Feature", "Parent", "Description", "Geneid"), sep = "([;])")
RNA_Gene_ID <- subset(RNA_ID_sep, select= Geneid)
class(RNA_Gene_ID)
RNA_Gene_ID <- gsub("gene_id=", "", RNA_Gene_ID$Geneid)
class(RNA_Gene_ID)
counts_min_outliers <- counts_min_outliers[!counts_min_outliers$Geneid %in% RNA_Gene_ID]
mat <- as.matrix(counts_min_outliers, rownames= 'Geneid')
ss_min_outliers[, group := paste(Time)]
ss_min_outliers$Time <- as.factor(ss_min_outliers$Time)
class(ss_min_outliers$Time)
design <- model.matrix(~0 + ss_min_outliers$group)
colnames(design) <- sub('ss_min_outliers$group', '', colnames(design), fixed= TRUE)
y <- DGEList(counts= mat, group= ss_min_outliers$group)
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]
y <- calcNormFactors(y)
y <- estimateDisp(y, design)
#The glm approach to multiple groups is similar to the classic approach,
#but permits more general comparisons to be made
design_glm <- model.matrix(~0+group, data=y$samples)
#colnames(design_glm) <- levels(y$samples$group)
design_glm
# These must be the same as those for ATAC
contrasts <- makeContrasts("h24vs16"= group24 - group16,
"h24vs12"= group24 - group12,
"h16vs12"= group16 - group12,
"h16vs8"= group16 - group08,
"h16vs4"= group16 - group04,
"h12vs8"= group12 - group08,
"h8vs4"= group08 - group04,
"h4vs0"= group04 - group00,
levels= make.names(colnames(design_glm)))
class(design_glm)
stopifnot(all(abs(colSums(contrasts)) < 1e-6))
fit <- glmFit(y, design_glm, prior.count= 1)
dge <- list()
#Functions to construct, coerce and check for both kinds of R lists.
for(cntr in colnames(contrasts)){{
print(cntr)
lfc <- glmTreat(fit, contrast= contrasts[, cntr], lfc= log2(1.5))
#numeric scalar specifying the absolute value
#of the log2-fold change threshold
#above which differential expression is to be considered.
detable <- topTags(lfc, n= nrow(y))$table
#n = max number of genes/tags to return
detable$gene_id <- row.names(detable)
detable <- data.table(detable)
detable[, contrast := cntr]
dge[[length(dge)+1]] <- detable
}}
dge <- rbindlist(dge)
class(dge)
dge[, unshrunk.logFC := NULL]
summary(decideTests(lfc))
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
dge
dgetest <- dge
is.data.table(dgetest) == TRUE
View(dgetest)
xord <- c('h24vs16', 'h24vs12', 'h16vs12', 'h16vs8', 'h16vs4', 'h12vs8', 'h8vs4', 'h4vs0')
dgetest[, contrast_order := factor(contrast, xord)]
View(detable)
View(dgetest)
nsig <- dgetest[, list(n_up= sum(FDR < 0.01 & logFC > 0), n_down= sum(FDR < 0.01 & logFC < 0)), contrast]
nsig[, n_up:= sprintf('Up = %s', n_up)]
nsig[, n_down:= sprintf('Down = %s', n_down)]
library(ggplot2)
gg <- ggplot(data= dgetest, aes(x= logCPM, y= logFC)) +
geom_point(alpha= 0.5, pch= '.') +
geom_point(data= dge[FDR < 0.01], alpha= 0.5, colour= 'red', pch= '.') +
#to avoid overplotting, geom_smooth() and alpha (make points transparent)
geom_smooth(se= FALSE, col= 'grey60', size= 0.1) +
geom_hline(yintercept= 0, colour= 'blue') +
geom_text(data= nsig, x= Inf, y= Inf, aes(label= n_up), vjust= 1.3, hjust= 1.1, size= 3) +
geom_text(data= nsig, x= Inf, y= -Inf, aes(label= n_down), vjust= -1.2, hjust= 1.1, size= 3) +
facet_wrap(~contrast, ncol= 2) +
#free_y - individual axes
theme_light() +
theme(strip.text= element_text(colour= 'black'))
gg
gg <- ggplot(data= dgetest, aes(x= logCPM, y= logFC)) +
geom_point(alpha= 0.5, pch= '.') +
geom_point(data= dge[FDR < 0.01], alpha= 0.5, colour= 'red', pch= '.') +
#to avoid overplotting, geom_smooth() and alpha (make points transparent)
geom_smooth(se= FALSE, col= 'grey60', size= 0.1) +
geom_hline(yintercept= 0, colour= 'blue') +
geom_text(data= nsig, x= Inf, y= Inf, aes(label= n_up), vjust= 1.3, hjust= 1.1, size= 3) +
geom_text(data= nsig, x= Inf, y= -Inf, aes(label= n_down), vjust= -1.2, hjust= 1.1, size= 3) +
facet_wrap(~contrast_order, ncol= 2) +
#free_y - individual axes
theme_light() +
theme(strip.text= element_text(colour= 'black'))
gg
ggsave('MAplot_order_extracontrasts_7Apr.png', width= 16, height= 20, units= 'cm')
View(nsig)
View(dgetest)
nsig <- dgetest[, list(n_up= sum(FDR < 0.01 & logFC > 0), n_down= sum(FDR < 0.01 & logFC < 0)), contrast_order]
nsig[, n_up:= sprintf('Up = %s', n_up)]
nsig[, n_down:= sprintf('Down = %s', n_down)]
View(nsig)
library(ggplot2)
gg <- ggplot(data= dgetest, aes(x= logCPM, y= logFC)) +
geom_point(alpha= 0.5, pch= '.') +
geom_point(data= dge[FDR < 0.01], alpha= 0.5, colour= 'red', pch= '.') +
#to avoid overplotting, geom_smooth() and alpha (make points transparent)
geom_smooth(se= FALSE, col= 'grey60', size= 0.1) +
geom_hline(yintercept= 0, colour= 'blue') +
geom_text(data= nsig, x= Inf, y= Inf, aes(label= n_up), vjust= 1.3, hjust= 1.1, size= 3) +
geom_text(data= nsig, x= Inf, y= -Inf, aes(label= n_down), vjust= -1.2, hjust= 1.1, size= 3) +
facet_wrap(~contrast_order, ncol= 2) +
#free_y - individual axes
theme_light() +
theme(strip.text= element_text(colour= 'black'))
gg
ggsave('MAplot_order_extracontrasts_7Apr.png', width= 16, height= 20, units= 'cm')
##Volcano plot
#Another common visualisation is the volcano plot which displays a
#measure of significance on the y-axis and fold-change on the x-axis. In this case we use the log2 fold change (logFC) on the x-axis, and on the y-axis we’ll use -log10(FDR). This -log10 transformation
#is commonly used for p-values as it means that more significant genes
#have a higher scale.
dge_volcano <- dgetest
#add a column of NA's
dge_volcano$diffexpressed <- "NO"
#if log10fold change > 3 and p-value less than 0.05, set as "UP"
dge_volcano$diffexpressed[dge_volcano$logFC > 3 & dge_volcano$FDR < 0.01] <- "UP"
dge_volcano$diffexpressed[dge_volcano$logFC < -3 & dge_volcano$FDR < 0.01] <- "DOWN"
dge_volcano$diffexpressed[dge_volcano$logFC > 3 & dge_volcano$FDR < 0.01] <- "UP"
##to automate a bit
mycolours <- c("blue", "red", "black")
names(mycolours) <- c("DOWN", "UP", "NO")
### Names of genes besides the points
dge_volcano$delabel <- NA
dge_volcano$delabel[dge_volcano$diffexpressed != "NO"] <- dge_volcano$gene_id[dge_volcano$diffexpressed != "NO"]
View(dge_volcano)
library(ggplot2)
library(ggrepel)
ggplot(dge_volcano, mapping = aes(x= logFC, y= -log10(FDR), col = diffexpressed, label=delabel)) +
geom_point() +
geom_text_repel() +
geom_vline(xintercept=c(-3,3), col="red") +
geom_hline(yintercept=-log10(0.01), col="red") +
facet_wrap(~contrast_order, ncol= 2) +
scale_colour_manual(values=mycolours)+ ##change point colour
theme_minimal()
volcano_plot <- ggplot(dge_volcano, mapping = aes(x= logFC, y= -log10(FDR), col = diffexpressed, label=delabel)) +
geom_point() +
geom_text_repel() +
geom_vline(xintercept=c(-3,3), col="red") +
geom_hline(yintercept=-log10(0.01), col="red") +
facet_wrap(~contrast_order, ncol= 2) +
scale_colour_manual(values=mycolours)+ ##change point colour
theme_minimal()
ggsave('Volcano_plot_order_7Apr.png', width= 16, height= 20, units= 'cm')
View(dge_volcano)
volcano_plot <- ggplot(dge_volcano, mapping = aes(x= logFC, y= -log10(PValue), col = diffexpressed, label=delabel)) +
geom_point() +
geom_text_repel() +
geom_vline(xintercept=c(-3,3), col="red") +
geom_hline(yintercept=-log10(0.01), col="red") +
facet_wrap(~contrast_order, ncol= 2) +
scale_colour_manual(values=mycolours)+ ##change point colour
theme_minimal()
dgetestgene_id = sprintf('gene_%02d'
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
volcano_plot
View(dge_volcano)
#add a column of NA's
dge_volcano$diffexpressed <- "NO"
##Volcano plot
#Another common visualisation is the volcano plot which displays a
#measure of significance on the y-axis and fold-change on the x-axis. In this case we use the log2 fold change (logFC) on the x-axis, and on the y-axis we’ll use -log10(FDR). This -log10 transformation
#is commonly used for p-values as it means that more significant genes
#have a higher scale.
dge_volcano <- dgetest
#add a column of NA's
dge_volcano$diffexpressed <- "NO"
#if log10fold change > 3 and p-value less than 0.01, set as "UP"
dge_volcano$diffexpressed[dge_volcano$logFC > 3 & dge_volcano$PValue < 0.01] <- "UP"
dge_volcano$diffexpressed[dge_volcano$logFC < -3 & dge_volcano$PValue < 0.01] <- "DOWN"
dge_volcano$diffexpressed[dge_volcano$logFC > 3 & dge_volcano$PValue < 0.01] <- "UP"
##to automate a bit
mycolours <- c("blue", "red", "black")
names(mycolours) <- c("DOWN", "UP", "NO")
### Names of genes besides the points
dge_volcano$delabel <- NA
dge_volcano$delabel[dge_volcano$diffexpressed != "NO"] <- dge_volcano$gene_id[dge_volcano$diffexpressed != "NO"]
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
ggsave('Volcano_plot_order_7Apr.png', width= 16, height= 20, units= 'cm')
ggsave('Volcano_plot_order_7Apr.png', width= 20, height= 25, units= 'cm')
volcano_plot <- ggplot(dge_volcano, mapping = aes(x= logFC, y= -log10(PValue), col = diffexpressed, label=delabel)) +
geom_point() +
ylab("-log10 (p-vaue)") +
xlab("log (fold change)") +
geom_vline(xintercept=c(-3,3), col="red") +
geom_hline(yintercept=-log10(0.01), col="red") +
facet_wrap(~contrast_order, ncol= 2) +
scale_colour_manual(values=mycolours)+ ##change point colour
theme_minimal()
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
ggsave('Volcano_plot_order_7Apr.png', width= 20, height= 25, units= 'cm')
volcano_plot <- ggplot(dge_volcano, mapping = aes(x= logFC, y= -log10(PValue), col = diffexpressed, label=delabel)) +
geom_point() +
ylab("-log10 (P-vaue)") +
xlab("log10 (Fold change)") +
geom_vline(xintercept=c(-3,3), col="red") +
geom_hline(yintercept=-log10(0.01), col="red") +
facet_wrap(~contrast_order, ncol= 2) +
scale_colour_manual(values=mycolours)+ ##change point colour
theme_minimal()
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
ggsave('Volcano_plot_order_7Apr.png', width= 20, height= 25, units= 'cm')
volcano_plot <- ggplot(dge_volcano, mapping = aes(x= logFC, y= -log10(PValue), col = diffexpressed, label=delabel)) +
geom_point() +
ylab("-log10 (P-vaue)") +
xlab("log2 (Fold change)") +
geom_vline(xintercept=c(-3,3), col="red") +
geom_hline(yintercept=-log10(0.01), col="red") +
facet_wrap(~contrast_order, ncol= 2) +
scale_colour_manual(values=mycolours)+ ##change point colour
theme_minimal()
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
ggsave('Volcano_plot_order_7Apr.png', width= 20, height= 25, units= 'cm')
volcano_plot <- ggplot(dge_volcano, mapping = aes(x= logFC, y= -log10(PValue), col = diffexpressed, label=delabel)) +
geom_point() +
ylab("-log10 (P-vaue)") +
xlab("log2 Fold change") +
geom_vline(xintercept=c(-3,3), col="red") +
geom_hline(yintercept=-log10(0.01), col="red") +
facet_wrap(~contrast_order, ncol= 2) +
scale_colour_manual(values=mycolours)+ ##change point colour
theme_minimal()
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
ggsave('Volcano_plot_order_7Apr.png', width= 20, height= 25, units= 'cm')
volcano_plot <- ggplot(dge_volcano, mapping = aes(x= logFC, y= -log10(PValue), col = diffexpressed, label=delabel)) +
geom_point() +
ylab("-log10 (P-vaue)") +
xlab("log2 Fold change") +
lab("Differential expression") +
geom_vline(xintercept=c(-0.6,0.6), col="red") +
geom_hline(yintercept=-log10(0.01), col="red") +
facet_wrap(~contrast_order, ncol= 2) +
scale_colour_manual(values=mycolours)+ ##change point colour
theme_minimal()
volcano_plot <- ggplot(dge_volcano, mapping = aes(x= logFC, y= -log10(PValue), col = diffexpressed, label=delabel)) +
geom_point() +
ylab("-log10 (P-vaue)") +
xlab("log2 Fold change") +
labs("Differential expression") +
geom_vline(xintercept=c(-0.6,0.6), col="red") +
geom_hline(yintercept=-log10(0.01), col="red") +
facet_wrap(~contrast_order, ncol= 2) +
scale_colour_manual(values=mycolours)+ ##change point colour
theme_minimal()
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
ggsave('Volcano_plot_order_7Apr.png', width= 20, height= 25, units= 'cm')
volcano_plot <- ggplot(dge_volcano, mapping = aes(x= logFC, y= -log10(PValue), col = diffexpressed, label=delabel)) +
geom_point() +
ylab("-log10 (P-vaue)") +
xlab("log2 Fold change") +
title("Volcano plot showing differentially expressed genes at different time points")
volcano_plot <- ggplot(dge_volcano, mapping = aes(x= logFC, y= -log10(PValue), col = diffexpressed, label=delabel)) +
geom_point() +
ylab("-log10 (P-vaue)") +
xlab("log2 Fold change") +
title("Volcano plot showing differentially expressed genes at different time points") +
labs("Differential expression") +
geom_vline(xintercept=c(-0.6,0.6), col="red") +
geom_hline(yintercept=-log10(0.01), col="red") +
facet_wrap(~contrast_order, ncol= 2) +
scale_colour_manual(values=mycolours)+ ##change point colour
theme_minimal()
volcano_plot <- ggplot(dge_volcano, mapping = aes(x= logFC, y= -log10(PValue), col = diffexpressed, label=delabel)) +
geom_point() +
ylab("-log10 (P-vaue)") +
xlab("log2 Fold change") +
ggtitle("Volcano plot showing differentially expressed genes at different time points") +
labs("Differential expression") +
geom_vline(xintercept=c(-0.6,0.6), col="red") +
geom_hline(yintercept=-log10(0.01), col="red") +
facet_wrap(~contrast_order, ncol= 2) +
scale_colour_manual(values=mycolours)+ ##change point colour
theme_minimal()
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
ggsave('Volcano_plot_order_7Apr.png', width= 20, height= 25, units= 'cm')
##Volcano plot
#Another common visualisation is the volcano plot which displays a
#measure of significance on the y-axis and fold-change on the x-axis. In this case we use the log2 fold change (logFC) on the x-axis, and on the y-axis we’ll use -log10(FDR). This -log10 transformation
#is commonly used for p-values as it means that more significant genes
#have a higher scale.
dge_volcano <- dgetest
#add a column of NA's
dge_volcano$diffexpressed <- "NO"
#if log10fold change > 0.6 and p-value less than 0.01, set as "UP"
dge_volcano$diffexpressed[dge_volcano$logFC > 0.6 & dge_volcano$PValue < 0.05] <- "UP"
dge_volcano$diffexpressed[dge_volcano$logFC < -0.6 & dge_volcano$PValue < 0.05] <- "DOWN"
##to automate a bit
mycolours <- c("blue", "red", "black")
names(mycolours) <- c("DOWN", "UP", "NO")
### Names of genes besides the points
dge_volcano$delabel <- NA
dge_volcano$delabel[dge_volcano$diffexpressed != "NO"] <- dge_volcano$gene_id[dge_volcano$diffexpressed != "NO"]
library(ggplot2)
library(ggrepel)
volcano_plot <- ggplot(dge_volcano, mapping = aes(x= logFC, y= -log10(PValue), col = diffexpressed, label=delabel)) +
geom_point() +
ylab("-log10 (P-vaue)") +
xlab("log2 Fold change") +
ggtitle("Volcano plot showing differentially expressed genes at different time points") +
labs("Differential expression") +
geom_vline(xintercept=c(-0.6,0.6), col="red") +
geom_hline(yintercept=-log10(0.01), col="red") +
facet_wrap(~contrast_order, ncol= 2) +
scale_colour_manual(values=mycolours)+ ##change point colour
theme_minimal()
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
ggsave('Volcano_plot_order_7Apr.png', width= 20, height= 25, units= 'cm')
volcano_plot <- ggplot(dge_volcano, mapping = aes(x= logFC, y= -log10(PValue), col = diffexpressed, label=delabel)) +
geom_point() +
ylab("-log10 (P-vaue)") +
xlab("log2 Fold change") +
ggtitle("Volcano plot showing significantly differentially expressed genes at different time points") +
labs("Differential expression") +
geom_vline(xintercept=c(-0.6,0.6), col="red") +
geom_hline(yintercept=-log10(0.01), col="red") +
facet_wrap(~contrast_order, ncol= 2) +
scale_colour_manual(values=mycolours)+ ##change point colour
theme_minimal()
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
ggsave('Volcano_plot_order_7Apr.png', width= 20, height= 25, units= 'cm')
global <- data.table(dgetest$gene_id, dgetest$contrast_order, dge$logFC)
global <- rename(global, gene_id = V1, contrast = V2, logFC = V3)
qq <- quantile(global$logFC, p= 0.995)
global[, col := ifelse(abs(global$logFC) > qq, qq, abs(logFC))]
p <- c(0.005, 0.05, 0.95, 0.99)
qbar <- global[, list(qq= quantile(logFC, p= p), p= p), by= contrast]
library(ggbeeswarm)
gg <- ggplot(data= global, aes(x= contrast, y= logFC, colour= col)) +
geom_line(data= qbar, aes(y= qq, group= p), colour= 'dodgerblue', alpha= 0.5) +
geom_quasirandom(width= 0.2, size= 0.25, bandwidth= 0.01) +
scale_colour_gradient(low= 'grey80', high= 'black', guide= FALSE) +
xlab('') +
theme_light()
setwd('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/')
ggsave('globalexpression_plot.png', width= length(unique(global$contrast)) * 2, height= 10, units= 'cm')
source('~/MRes_Malaria_2021/output/mres-malaria-gene-expression/R_output/rRNA_removal_MDS.R')
